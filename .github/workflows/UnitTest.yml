# This is a basic workflow to help you get started with Actions

name: UnitTest

# Controls when the action will run. 
on:
  # don't need push on main as only PR should be coming in (and this prevents the double build with PR because it then does a push)
  push:
    branches:
      - '**'
      - '!dev'
      - '!main'
      
  pull_request:
    branches:
      - '**'

  workflow_dispatch:


jobs:
  GitHubInfo:  
    name: Display info
    runs-on: ubuntu-latest
    steps:
      - name: output
        run: |
          echo "github.ref (branch?) = ${{ github.ref }}"
          echo "github.event.pull_request.head.ref (Branch) = ${{ github.event.pull_request.head.ref }}"
          echo "github.base_ref (PR Target branch) = ${{ github.base_ref }}"
          echo "Trigger = ${{ github.event_name }}"
          echo "Trigger Ation = ${{ github.event.action }}"
          echo "Merge = ${{ github.event.pull_request.merged }}"

  pester-test:
    name: Pester test
    # ----- skip job if 'skip ci' in commit and if it is the main branch
    if: "!contains(github.event.commits[0].message, '[skip ci]')"
    runs-on: windows-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      
      - name: pester-tests-report
        uses: zyborg/pester-tests-report@v1.3.3
        with:
          include_paths: Tests
          github_token: ${{ secrets.GITHUB_TOKEN }}
        
  UpdateModuleVersion:
    name: UpdatesModuleVersion and returns that Version
    needs: pester-test
    if: success() && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2        
        
      - name: GetRepoVersion
        if: success()
        id: GetRepoVer
        uses: jeffbuenting/GetRepoVersion@getfile

      - name: IncreaseVersion
        id: IncreaseVer
        shell: bash
        run: |
            CurVer=${{ steps.GetRepoVer.outputs.version }}
            IFS='.'
            read -a SplitVer <<<"$CurVer"
            Major=$((SplitVer[0]))
            Minor=$((SplitVer[1]))
            Build="$((SplitVer[2] + 1))"
            NewVer="$Major.$Minor.$Build"
            unset IFS
            echo "::set-output name=version::$NewVer"
         
      - name: Show Version
        run: |
          echo "NewVer = ${{ steps.IncreaseVer.outputs.version }}"
  
      - name: UpdateModuleVersion
        uses: ./
        with: 
          vertype: ${{ steps.GetRepoVer.outputs.versiontype }}
          newver: ${{ steps.IncreaseVer.outputs.version }}
           
      - name: UpdateReadmeVersionBadge
        uses: jeffbuenting/UpdateCustomBadge@jeffbuenting-patch-1
        with:
          filename: 'README.md'
          label: 'Version'
          message: ${{ steps.IncreaseVer.outputs.version }}
          
      - name: Commit
        if: ${{ success() }}
        run: |
          git status
          git config --global user.name 'github actions'      
          git config --global user.email 'actions@github.com'
          git ls-files --others --exclude-standard
          git commit -am "skip ci - Commit Updated Version Files in Repo to: ${{steps.IncreaseVer.outputs.version}}"
          git push
 
  FailedPRPesterTest:
    name: Close PR after failed tests
    needs: pester-test
    if: failure() && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: PR info
        run: echo "PR number = ${{ github.event.number }}"
    
      - name: Close Pull
        uses: peter-evans/close-pull@v1
        with:
          pull-request-number: github.event.number
          comment: Tests failed. Auto-closing pull request
          delete-branch: false